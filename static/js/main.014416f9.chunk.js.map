{"version":3,"sources":["Components/SubRedditList.js","actions/actionsType.js","Services/searchReddit.js","actions/index.js","App.js","reportWebVitals.js","Reducers/setStateSubrredit.js","Reducers/index.js","store/index.js","index.js"],"names":["SubRedditList","this","props","redditList","topic","select","map","subreddit","href","data","url","target","rel","title","Component","connect","state","setStateReddit","REQUEST_SUBREDDIT","REQUEST_SUBREDDIT_SUCCCESS","REQUEST_SUBREDDIT_FAILURE","searchReddit","fetch","then","resp","json","children","catch","error","requestReddit","dispatch","type","isFechting","requestSubrreditSuccess","App","handleOption","bind","value","setState","className","onChange","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","setStateSubrredit","action","loading","isFetching","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.014416f9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass SubRedditList extends Component {\n  render() {\n    const { redditList, topic, select } = this.props\n    if (!select) return <div>escolha um topico para pesquisar</div>\n    return (\n      <div>\n        <h2>Lista de Subtópicos {topic}</h2>\n        {(redditList) \n          ? <ul>\n              {redditList.map((subreddit) => (\n                <a href={ subreddit.data.url } target=\"_blank\" rel=\"noreferrer\" >\n                  <li>{ subreddit.data.title }</li>\n                </a>\n              ))}\n            </ul>\n          : null }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  redditList: state.setStateReddit.data\n})\n\nexport default connect(mapStateToProps)(SubRedditList);","export const REQUEST_SUBREDDIT = \"REQUEST_SUBREDDIT\";\nexport const REQUEST_SUBREDDIT_SUCCCESS = \"REQUEST_SUBREDDIT_SUCCCESS\";\nexport const REQUEST_SUBREDDIT_FAILURE = \"REQUEST_SUBREDDIT_FAILURE\";\n","const searchReddit = (topic) => {\n  return fetch(`https://www.reddit.com/r/${topic}.json`)\n    .then((resp) => resp.json())\n    .then((resp) => resp.data.children)\n    .catch((error) => error)\n}\n\nexport default searchReddit;","import {\n  REQUEST_SUBREDDIT,\n  REQUEST_SUBREDDIT_SUCCCESS,\n  REQUEST_SUBREDDIT_FAILURE\n} from './actionsType';\nimport searchReddit from '../Services/searchReddit';\n\nconst requestSubrredit = () => ({\n  type: REQUEST_SUBREDDIT,\n  isFechting: true,\n})\n\nconst requestSubrreditSuccess = (data) => ({\n  type: REQUEST_SUBREDDIT_SUCCCESS,\n  isFechting: false,\n  data,\n})\n\nconst requestSubrreditFailure = (topic) => ({\n  type: REQUEST_SUBREDDIT_FAILURE,\n  isFechting: false,\n})\n\nconst requestReddit = (topic) => {\n  return (dispatch) => {\n    dispatch(requestSubrredit());\n    return searchReddit(topic)\n      .then((data) => dispatch(requestSubrreditSuccess(data)))\n      .catch((error) => dispatch(requestSubrreditFailure(error)))\n  }\n}\n\nexport default requestReddit;","import React, { Component } from 'react';\nimport SubRedditList from './Components/SubRedditList';\nimport { connect } from 'react-redux'\nimport requestReddit from './actions';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.handleOption = this.handleOption.bind(this)\n\n    this.state = {\n      topic: '',\n      select: false,\n    }\n  }\n\n  handleOption({target: { value }}) {\n    const { setStateReddit } = this.props\n    if (value === \"noSelect\") {\n      this.setState({ topic: '', select: false })\n    } else {\n      this.setState({ topic: value, select: true })\n      setStateReddit(value)\n    }\n  }\n\n  render() {\n    const { topic, select } = this.state;\n    return (\n      <div className=\"App\">\n        <h1>Reddit.dev</h1>\n        <select className=\"form-select\" onChange={ this.handleOption }>\n          <option value='noSelect'>Selecione um tópico</option>\n          <option value=\"frontend\">Frontend</option>\n          <option value=\"ReactJS\">Reactjs</option>\n        </select>\n        <SubRedditList topic={ topic } select={ select }/>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  setStateReddit: (value) => dispatch(requestReddit(value))\n})\n\nexport default connect(null, mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  REQUEST_SUBREDDIT,\n  REQUEST_SUBREDDIT_SUCCCESS,\n  REQUEST_SUBREDDIT_FAILURE\n} from '../actions/actionsType';\n\nconst INITIAL_STATE = {\n\n}\n\nconst setStateSubrredit = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case REQUEST_SUBREDDIT:\n      return {\n        ...state,\n        loading: action.isFetching\n      };\n    case REQUEST_SUBREDDIT_SUCCCESS:\n      return {\n        ...state,\n        loading: action.isFetching,\n        data: action.data,\n      };\n    case REQUEST_SUBREDDIT_FAILURE:\n      return {\n        ...state,\n        loading: action.loading,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default setStateSubrredit;","import { combineReducers } from 'redux'\nimport setStateReddit from './setStateSubrredit';\n\nconst rootReducer = combineReducers({ setStateReddit })\n\nexport default rootReducer;","import { applyMiddleware, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../Reducers\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}